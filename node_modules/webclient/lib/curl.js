'use strict';
var qs = require('qs');
var Url = require('url');
var Curl = require('node-libcurl').Curl;
var WebClientJar = require('./cookie');

Curl.prototype.get = function (opts) {
    opts.followRedirect = opts.followRedirect ? true : false;
    if (opts.jar && (opts.jar instanceof WebClientJar) == false) {
        throw new Error('Your cookie jar has to be an instance of WebClientJar');
    }

    this._setOpts(opts);

    return new Promise(function (resolve, reject) {
        this.on('end', function (statusCode, body, headers) {
            let response = {
                'statusCode': statusCode,
                'requestUrl': opts.url,
                'headers': headers[0],
                'caseless': {},
                'body': body
            };

            for (let key in response.headers) {
                response.caseless[key.toLowerCase()] = response.headers[key];
            }

            if (opts.jar && response.caseless['set-cookie']) {
                for (let cookie of response.caseless['set-cookie']) {
                    opts.jar.setCookie(cookie, response.requestUrl, {ignoreError: true});
                }
            }

            resolve([response, response.body]);
            this.close();
        });

        this.on('error', function(err, errCode) {
            err.url = opts.url;
            reject([err, errCode]);
            // err.code = errCode;
            // reject(err);

            this.close();
        });

        this.perform();
    }.bind(this));
};

Curl.prototype._setOpts = function (opts) {
    let curlOpts = {};

    if (opts.qs) {
        let url = Url.parse(opts.url);
        if (url.search) {
            url.search += '&';
        } else {
            url.search = '';
        }
        url.search += qs.stringify(opts.qs);
        delete opts.qs;

        opts.url = Url.format(url);
    }

    if (opts.form) {
        curlOpts['POST'] = true;
        curlOpts['POSTFIELDS'] = qs.stringify(opts.form);
    }

    if (opts.jar) {
        let cookie = opts.jar.getCookieString(opts.url);
        if (cookie) curlOpts['COOKIE'] = cookie;
    }

    curlOpts['CUSTOMREQUEST'] = opts.method || 'GET';
    curlOpts['URL'] = opts.url;
    curlOpts['CONNECTTIMEOUT_MS'] = opts.timeout || 30000; // TODO: difference between this and timeout
    curlOpts['FOLLOWLOCATION'] = false;

    if (opts.gzip) {
        curlOpts['ACCEPT_ENCODING'] = 'gzip';
    }

    if (opts.localAddress) {
        curlOpts['INTERFACE'] = opts.localAddress;
        // TODO: curlOpts['DNS_INTERFACE'] = curlOpts['INTERFACE'];
    }

    if (opts.proxy) {
        curlOpts['PROXY'] = opts.proxy;
    }

    if (opts.referer) {
        curlOpts['REFERER'] = opts.referer;
    }

    if (opts.headers) {
        curlOpts['HTTPHEADER'] = [];
        for (let key in opts.headers) {
            curlOpts['HTTPHEADER'].push(key + ': ' + opts.headers[key]);
        }
    }

    for (let key in curlOpts) {
        this.setOpt(Curl.option[key], curlOpts[key]);
    }
};

module.exports = function (opts) {
    let curl = new Curl();

    return curl.get(opts);
};
